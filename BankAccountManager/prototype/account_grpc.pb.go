// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package account

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServiceClient interface {
	Acc_Create(ctx context.Context, opts ...grpc.CallOption) (AccountService_Acc_CreateClient, error)
	Acc_Info(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountResponse, error)
	Acc_Update(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountResponse, error)
	Acc_Delete(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountResponse, error)
	Acc_List(ctx context.Context, in *AccountListRequest, opts ...grpc.CallOption) (*AccountListResponse, error)
	Acc_Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error)
	Acc_Deposit(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositResponse, error)
	Acc_Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error)
}

type accountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceClient(cc grpc.ClientConnInterface) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) Acc_Create(ctx context.Context, opts ...grpc.CallOption) (AccountService_Acc_CreateClient, error) {
	stream, err := c.cc.NewStream(ctx, &AccountService_ServiceDesc.Streams[0], "/account.AccountService/Acc_Create", opts...)
	if err != nil {
		return nil, err
	}
	x := &accountServiceAcc_CreateClient{stream}
	return x, nil
}

type AccountService_Acc_CreateClient interface {
	Send(*AccountRequest) error
	Recv() (*AccountResponse, error)
	grpc.ClientStream
}

type accountServiceAcc_CreateClient struct {
	grpc.ClientStream
}

func (x *accountServiceAcc_CreateClient) Send(m *AccountRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *accountServiceAcc_CreateClient) Recv() (*AccountResponse, error) {
	m := new(AccountResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accountServiceClient) Acc_Info(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountResponse, error) {
	out := new(AccountResponse)
	err := c.cc.Invoke(ctx, "/account.AccountService/Acc_Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) Acc_Update(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountResponse, error) {
	out := new(AccountResponse)
	err := c.cc.Invoke(ctx, "/account.AccountService/Acc_Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) Acc_Delete(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountResponse, error) {
	out := new(AccountResponse)
	err := c.cc.Invoke(ctx, "/account.AccountService/Acc_Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) Acc_List(ctx context.Context, in *AccountListRequest, opts ...grpc.CallOption) (*AccountListResponse, error) {
	out := new(AccountListResponse)
	err := c.cc.Invoke(ctx, "/account.AccountService/Acc_List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) Acc_Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error) {
	out := new(WithdrawResponse)
	err := c.cc.Invoke(ctx, "/account.AccountService/Acc_Withdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) Acc_Deposit(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositResponse, error) {
	out := new(DepositResponse)
	err := c.cc.Invoke(ctx, "/account.AccountService/Acc_Deposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) Acc_Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*TransferResponse, error) {
	out := new(TransferResponse)
	err := c.cc.Invoke(ctx, "/account.AccountService/Acc_Transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceServer is the server API for AccountService service.
// All implementations must embed UnimplementedAccountServiceServer
// for forward compatibility
type AccountServiceServer interface {
	Acc_Create(AccountService_Acc_CreateServer) error
	Acc_Info(context.Context, *AccountRequest) (*AccountResponse, error)
	Acc_Update(context.Context, *AccountRequest) (*AccountResponse, error)
	Acc_Delete(context.Context, *AccountRequest) (*AccountResponse, error)
	Acc_List(context.Context, *AccountListRequest) (*AccountListResponse, error)
	Acc_Withdraw(context.Context, *WithdrawRequest) (*WithdrawResponse, error)
	Acc_Deposit(context.Context, *DepositRequest) (*DepositResponse, error)
	Acc_Transfer(context.Context, *TransferRequest) (*TransferResponse, error)
	mustEmbedUnimplementedAccountServiceServer()
}

// UnimplementedAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServiceServer struct {
}

func (UnimplementedAccountServiceServer) Acc_Create(AccountService_Acc_CreateServer) error {
	return status.Errorf(codes.Unimplemented, "method Acc_Create not implemented")
}
func (UnimplementedAccountServiceServer) Acc_Info(context.Context, *AccountRequest) (*AccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Acc_Info not implemented")
}
func (UnimplementedAccountServiceServer) Acc_Update(context.Context, *AccountRequest) (*AccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Acc_Update not implemented")
}
func (UnimplementedAccountServiceServer) Acc_Delete(context.Context, *AccountRequest) (*AccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Acc_Delete not implemented")
}
func (UnimplementedAccountServiceServer) Acc_List(context.Context, *AccountListRequest) (*AccountListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Acc_List not implemented")
}
func (UnimplementedAccountServiceServer) Acc_Withdraw(context.Context, *WithdrawRequest) (*WithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Acc_Withdraw not implemented")
}
func (UnimplementedAccountServiceServer) Acc_Deposit(context.Context, *DepositRequest) (*DepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Acc_Deposit not implemented")
}
func (UnimplementedAccountServiceServer) Acc_Transfer(context.Context, *TransferRequest) (*TransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Acc_Transfer not implemented")
}
func (UnimplementedAccountServiceServer) mustEmbedUnimplementedAccountServiceServer() {}

// UnsafeAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceServer will
// result in compilation errors.
type UnsafeAccountServiceServer interface {
	mustEmbedUnimplementedAccountServiceServer()
}

func RegisterAccountServiceServer(s grpc.ServiceRegistrar, srv AccountServiceServer) {
	s.RegisterService(&AccountService_ServiceDesc, srv)
}

func _AccountService_Acc_Create_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AccountServiceServer).Acc_Create(&accountServiceAcc_CreateServer{stream})
}

type AccountService_Acc_CreateServer interface {
	Send(*AccountResponse) error
	Recv() (*AccountRequest, error)
	grpc.ServerStream
}

type accountServiceAcc_CreateServer struct {
	grpc.ServerStream
}

func (x *accountServiceAcc_CreateServer) Send(m *AccountResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *accountServiceAcc_CreateServer) Recv() (*AccountRequest, error) {
	m := new(AccountRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AccountService_Acc_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).Acc_Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/Acc_Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).Acc_Info(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_Acc_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).Acc_Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/Acc_Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).Acc_Update(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_Acc_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).Acc_Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/Acc_Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).Acc_Delete(ctx, req.(*AccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_Acc_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).Acc_List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/Acc_List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).Acc_List(ctx, req.(*AccountListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_Acc_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).Acc_Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/Acc_Withdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).Acc_Withdraw(ctx, req.(*WithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_Acc_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).Acc_Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/Acc_Deposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).Acc_Deposit(ctx, req.(*DepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_Acc_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).Acc_Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.AccountService/Acc_Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).Acc_Transfer(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountService_ServiceDesc is the grpc.ServiceDesc for AccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Acc_Info",
			Handler:    _AccountService_Acc_Info_Handler,
		},
		{
			MethodName: "Acc_Update",
			Handler:    _AccountService_Acc_Update_Handler,
		},
		{
			MethodName: "Acc_Delete",
			Handler:    _AccountService_Acc_Delete_Handler,
		},
		{
			MethodName: "Acc_List",
			Handler:    _AccountService_Acc_List_Handler,
		},
		{
			MethodName: "Acc_Withdraw",
			Handler:    _AccountService_Acc_Withdraw_Handler,
		},
		{
			MethodName: "Acc_Deposit",
			Handler:    _AccountService_Acc_Deposit_Handler,
		},
		{
			MethodName: "Acc_Transfer",
			Handler:    _AccountService_Acc_Transfer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Acc_Create",
			Handler:       _AccountService_Acc_Create_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "prototype/account.proto",
}
